---
import "../style/global.css";
import Navigation from "../components/navigation/Navigation.astro";
import Footer from "../components/navigation/Footer.astro";

interface ArticleMetadata {
	publishedTime: string;
	modifiedTime?: string;
	authors: string[];
	tags?: string[];
}

interface Props {
	title?: string;
	description?: string;
	ogImage?: string;
	canonicalURL?: string;
	article?: ArticleMetadata;
}

const {
	title = "Rico Loschke - KI Experte",
	description = "Ganzheitliches Wissen zu generativer KI und deren Anwendung in der Praxis",
	ogImage,
	canonicalURL,
	article,
} = Astro.props;

// Check if we're on the homepage
const isHomepage = Astro.url.pathname === "/";

// Prepare canonical URL
const finalCanonicalURL =
	canonicalURL ||
	new URL(Astro.url.pathname, Astro.site || "https://kvix.de").toString();
---

<!doctype html>
<html lang="de" class="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="description" content={description} />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link
			rel="preload"
			href="/fonts/FFClanProRegular.woff2"
			as="font"
			type="font/woff2"
			crossorigin
		/>
		<link rel="stylesheet" href="/fonts/fonts.css" />
		<link rel="canonical" href={finalCanonicalURL} />

		{/* Open Graph */}
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:type" content={article ? "article" : "website"} />
		<meta property="og:url" content={finalCanonicalURL} />
		<meta property="og:site_name" content="Rico Loschke" />
		{ogImage && <meta property="og:image" content={ogImage} />}

		{/* Twitter Card */}
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		{ogImage && <meta name="twitter:image" content={ogImage} />}

		{/* Article Metadata */}
		{
			article && (
				<>
					<meta
						property="article:published_time"
						content={article.publishedTime}
					/>
					{article.modifiedTime && (
						<meta
							property="article:modified_time"
							content={article.modifiedTime}
						/>
					)}
					{article.authors?.map((author) => (
						<meta property="article:author" content={author} />
					))}
					{article.tags?.map((tag) => (
						<meta property="article:tag" content={tag} />
					))}
				</>
			)
		}

		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="bg-base text-white/90 min-h-screen flex flex-col">
		<Navigation />
		<main class={`flex-grow ${isHomepage ? "" : "pt-32"}`}>
			<slot />
		</main>
		<Footer />
	</body>
</html>

<script is:inline>
	const updateTheme = () => {
		const isDark =
			localStorage.theme === "dark" ||
			(!("theme" in localStorage) &&
				window.matchMedia("(prefers-color-scheme: dark)").matches);
		document.documentElement.classList.toggle("dark", isDark);
	};
	updateTheme();
	window.addEventListener("storage", updateTheme);
	window
		.matchMedia("(prefers-color-scheme: dark)")
		.addEventListener("change", updateTheme);
</script>

<style>
	/* Ensure subpage content starts below navigation */
	main:not(:empty) {
		position: relative;
		z-index: 1;
	}
</style>
