---
import { type MarkdownHeading } from "astro";
import { Picture } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import BackToLink from "../../components/ui/BackToLink.astro";
import {
    getBlogPosts,
    validateAndGetPost,
    type BlogPost,
} from "../../utils/blog";

interface Props {
    entry: BlogPost;
}

export async function getStaticPaths() {
    const posts = await getBlogPosts();

    return Promise.all(
        posts.map(async (entry) => {
            // Use the new validateAndGetPost function for better validation
            const post = await validateAndGetPost(entry.id);

            if (!post) {
                // Return a 404 response for invalid posts
                return {
                    params: { slug: entry.id },
                    props: { entry: null },
                };
            }

            return {
                params: { slug: entry.id },
                props: { entry: post },
            };
        }),
    );
}

// Get the entry from props
const { entry } = Astro.props;

// Redirect to 404 if post not found
if (!entry) {
    return Astro.redirect("/404", 404);
}

// Render the content with error handling
let Content, headings;
try {
    const rendered = await entry.render();
    Content = rendered.Content;
    headings = rendered.headings;
} catch (error) {
    console.error(`Error rendering post ${entry.id}:`, error);
    return Astro.redirect("/404", 404);
}

const formatDate = (date: Date): string => {
    try {
        return new Date(date).toLocaleDateString("de-DE", {
            year: "numeric",
            month: "long",
        });
    } catch {
        return "";
    }
};

// Prepare SEO metadata
const seoTitle =
    entry.data.seo?.metaTitle || `${entry.data.title} - Rico Loschke`;
const seoDescription =
    entry.data.seo?.metaDescription || entry.data.description;
const ogImage = entry.data.seo?.ogImage || entry.data.heroImage;

// Prepare author data with fallbacks
const authorName = entry.data.author?.name || "Rico Loschke";
const authorAvatar =
    entry.data.author?.avatar || "/images/rico-loschke_avatar.jpg";

// Prepare article metadata for SEO
const articleMetadata = {
    publishedTime: entry.data.pubDate.toISOString(),
    modifiedTime: entry.data.updatedDate?.toISOString(),
    authors: [authorName],
    tags: entry.data.tags || [],
};
---

<Layout
    title={seoTitle}
    description={seoDescription}
    ogImage={ogImage}
    article={articleMetadata}
    canonicalURL={entry.data.seo?.canonicalURL}
>
    <!-- Hero Section -->
    <div class="max-w-4xl mx-auto px-4 sm:px-6 pb-12">
        {
            entry.data.heroImage && (
                <div class="relative w-full aspect-[16/9] mb-8">
                    <Picture
                        src={entry.data.heroImage}
                        alt={entry.data.title}
                        formats={["avif", "webp"]}
                        fallbackFormat="png"
                        width={1200}
                        height={675}
                        loading="eager"
                        class="w-full h-full object-cover rounded-xl"
                        transition:name={`hero-${entry.id}`}
                    />
                </div>
            )
        }

        <div class="text-center">
            {
                entry.data.pubDate && (
                    <time
                        datetime={entry.data.pubDate.toISOString()}
                        class="text-white/60"
                        transition:name={`date-${entry.id}`}
                    >
                        {formatDate(entry.data.pubDate)}
                    </time>
                )
            }

            <h1
                class="text-4xl md:text-5xl font-bold my-6"
                transition:name={`title-${entry.id}`}
            >
                {entry.data.title}
            </h1>

            {
                entry.data.description && (
                    <p
                        class="text-xl text-white/80"
                        transition:name={`excerpt-${entry.id}`}
                    >
                        {entry.data.description}
                    </p>
                )
            }

            {
                entry.data.categories && entry.data.categories.length > 0 && (
                    <div
                        class="flex flex-wrap justify-center gap-2 mt-6"
                        transition:name={`categories-${entry.id}`}
                    >
                        {entry.data.categories.map((category: string) => (
                            <a
                                href={`/blog/category/${category.toLowerCase()}`}
                                class="px-3 py-1 bg-white/5 rounded-full text-sm hover:bg-white/10 transition-colors"
                                aria-label={`Artikel in der Kategorie ${category}`}
                            >
                                {category}
                            </a>
                        ))}
                    </div>
                )
            }

            <div class="flex items-center justify-center mt-6 gap-3">
                <Picture
                    src={authorAvatar}
                    alt={authorName}
                    formats={["avif", "webp"]}
                    fallbackFormat="jpg"
                    width={40}
                    height={40}
                    class="rounded-full"
                />
                <span class="text-white/80">{authorName}</span>
            </div>
        </div>
    </div>

    <div class="border-t border-white/5 my-8" role="separator"></div>

    <!-- Content Container -->
    <div class="max-w-[1200px] mx-auto px-4 sm:px-6">
        <div class="relative flex flex-col xl:flex-row xl:gap-24">
            <!-- Main Content -->
            <main class="flex-1">
                <div class="max-w-[65ch] mx-auto">
                    <article class="prose prose-invert max-w-none">
                        <Content />

                        {
                            entry.data.tags && entry.data.tags.length > 0 && (
                                <div class="mt-12 pt-8 border-t border-white/5">
                                    <div
                                        class="flex flex-wrap gap-2"
                                        role="list"
                                        aria-label="Artikel-Tags"
                                    >
                                        {entry.data.tags.map((tag: string) => (
                                            <a
                                                href={`/blog/tag/${tag.toLowerCase()}`}
                                                class="px-3 py-1 bg-white/5 rounded-full text-sm hover:bg-white/10 transition-colors text-white/80 hover:text-white"
                                                aria-label={`Artikel mit Tag ${tag}`}
                                            >
                                                #{tag}
                                            </a>
                                        ))}
                                    </div>
                                </div>
                            )
                        }

                        <footer class="mt-12 pt-8 border-t border-white/5">
                            <BackToLink href="/blog" />
                        </footer>
                    </article>
                </div>
            </main>

            <!-- Table of Contents -->
            {
                headings && headings.length > 0 && (
                    <aside
                        class="hidden xl:block w-80 shrink-0"
                        aria-label="Inhaltsverzeichnis"
                    >
                        <div class="sticky top-24">
                            <div class="p-6 bg-white/5 backdrop-blur-sm rounded-xl">
                                <h2 class="text-xl font-bold mb-4">
                                    Inhaltsverzeichnis
                                </h2>
                                <nav
                                    class="space-y-2"
                                    id="toc-nav"
                                    aria-label="Artikel-Navigation"
                                >
                                    {headings.map(
                                        (heading: MarkdownHeading) => (
                                            <a
                                                href={`#${heading.slug}`}
                                                class={`block transition-colors toc-item
                                            ${heading.depth === 2 ? "ml-0" : ""}
                                            ${heading.depth === 3 ? "ml-4 text-sm" : ""}
                                            ${heading.depth === 4 ? "ml-8 text-sm" : ""}`}
                                                data-heading={heading.slug}
                                                aria-level={heading.depth}
                                            >
                                                {heading.text}
                                            </a>
                                        ),
                                    )}
                                </nav>
                            </div>
                        </div>
                    </aside>
                )
            }
        </div>
    </div>
</Layout>

<style>
    .prose {
        @apply prose-headings:scroll-mt-32;
    }

    .toc-item {
        @apply text-white/60 hover:text-white/80 transition-colors;
    }

    .toc-item.active {
        @apply text-white font-bold;
    }

    /* Improve ToC readability */
    nav {
        max-height: calc(100vh - 200px);
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.1) transparent;
    }

    nav::-webkit-scrollbar {
        width: 4px;
    }

    nav::-webkit-scrollbar-track {
        background: transparent;
    }

    nav::-webkit-scrollbar-thumb {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 2px;
    }
</style>

<script>
    import "../../scripts/toc";
</script>
